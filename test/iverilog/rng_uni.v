`timescale 1ns / 1ns

module rng_uni_tb ();

    reg  clk, rst, mode;
    reg [1023 : 0] init_state;
    wire s_in;
    wire [31 : 0] rng;

    initial begin
        $dumpfile("rng_uni.vcd");
        // $dumpvars(0, rng_uni_tb);
        init_state = 1024'b
        clk = 1'b0;
        rst = 1'b1;
        mode = 1'b0;
        #30;
        rst = 1'b0;
        mode = 1'b1; // Serial load mode.
        #10240;
        mode = 1'b0; // RNG mode.

        #40000000;
        $finish;
    end

    rng_uni UUT (
    .rng   (rng),
    .s_out (), // Unconnected.
    .s_in  (s_in),
    .ce    (1'b1),
    .mode  (mode),
    .rst   (rst),
    .clk   (clk)
    );

    always @(posedge clk) begin
        if (mode) begin
            init_state <= {init_state[0], init_state[1023 : 1]};
        end else begin
            init_state <= init_state;
            $display("%d", rng);
        end
    end

    assign s_in = init_state[0];

    always begin
        #5 clk = (clk === 1'b0);
    end

endmodule
